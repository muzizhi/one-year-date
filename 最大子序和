//给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。
//输入[-2,1,-3,4,-1,2,1,-5,4],连续子数组 [4,-1,2,1] 的和最大=6；
//思路：很容易漏这种，存储填表，动态规划不用设定两个变量。循环一遍o（n）即可。如果d[i-1]>0,d[i]=d[i-1]+nums[i];否则d[i]=nums[i]，保存好max。


class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n=nums.size();
        vector<int> dp(n);
        dp[0]=nums[0];
        int max=nums[0];
        for(int i=1;i<n;i++)
        {
            if(0<dp[i-1])
                dp[i]=dp[i-1]+nums[i];
            else
                dp[i]=nums[i];
            if(dp[i]>max)
                max=dp[i];
        }
        return max;
    }
};


